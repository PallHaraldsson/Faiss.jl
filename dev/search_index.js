var documenterSearchIndex = {"docs":
[{"location":"#Faiss.jl","page":"Introduction","title":"Faiss.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A simple Julia wrapper around the Faiss library for similarity search with PythonCall.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"While functional and faster then NearestNeighbors.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Faiss is a library for efficient similarity search and clustering of dense vectors. It contains algorithms that search in sets of vectors of any size, up to ones that possibly do not fit in RAM. It also contains supporting code for evaluation and parameter tuning. Faiss is written in C++ with complete wrappers for Python/numpy. Some of the most useful algorithms are implemented on the GPU. It is developed primarily at Facebook AI Research.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add Faiss","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"if use a already existed python env, you can:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ENV[\"JULIA_PYTHONCALL_EXE\"] = \"/your/path/of/python\"\npkg> add Faiss","category":"page"},{"location":"#usage","page":"Introduction","title":"usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using Faiss\n\nprintln(\"faiss:\", Faiss.faiss.__version__, \", gpus:\", ENV[\"CUDA_VISIBLE_DEVICES\"], \n        \", faiss path:\", Faiss.faiss.__path__[0], \", num_gpus:\", Faiss.faiss.get_num_gpus())\n# Faiss.faiss.  Enter Tab to list faiss api\n\nfeats = rand(10^4, 128);\ntop_k = 10\nfeat_dim = size(feats, 2)   # dimension\nidx = Index(feat_dim; str=\"IDMap2,Flat\", metric=\"L2\", gpus=\"4\")  # init Faiss Index\nshow(idx)   # show idx info\n\nvs_gallery = feats;\nvs_query = feats[1:100, :];\nids = collect(range(1, size(feats, 1)))\n\n# add(idx, vs_gallery)\nadd_with_ids(idx, vs_gallery, ids)\nD, I = search(idx, vs_query, top_k) \nprintln(typeof(D), size(D))\nprintln(D[1:5, :])","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Faiss wiki","category":"page"},{"location":"example/#Faiss.jl-usage-examples","page":"example","title":"Faiss.jl usage examples","text":"","category":"section"},{"location":"example/#example-1","page":"example","title":"example 1","text":"","category":"section"},{"location":"example/","page":"example","title":"example","text":"using Faiss\n\nprintln(\"faiss:\", Faiss.faiss.__version__, \", gpus:\", ENV[\"CUDA_VISIBLE_DEVICES\"], \n        \", faiss path:\", Faiss.faiss.__path__[0], \", num_gpus:\", Faiss.faiss.get_num_gpus())\n# Faiss.faiss.  Enter Tab to list faiss api\n\nfeats = rand(10^4, 128);\ntop_k = 10\nfeat_dim = size(feats, 2)   # dimension\nidx = Index(feat_dim; str=\"IDMap2,Flat\", metric=\"L2\", gpus=\"4\")  # init Faiss Index\nshow(idx)   # show idx info\n\nvs_gallery = feats;\nvs_query = feats[1:100, :];\nids = collect(range(1, size(feats, 1)))\n\n# add(idx, vs_gallery)\nadd_with_ids(idx, vs_gallery, ids)\nD, I = search(idx, vs_query, top_k) \nprintln(typeof(D), size(D))\nprintln(D[1:5, :])","category":"page"},{"location":"example/#example-2","page":"example","title":"example 2","text":"","category":"section"},{"location":"example/","page":"example","title":"example","text":"using Faiss\n\nfeats = rand(10^4, 128);\ntop_k = 10\nvs_gallery = feats;\nvs_query = feats[1:100, :];\nids = collect(range(1, size(feats, 1)))\n\nD, I = local_rank(vs_query, vs_gallery, k=top_k, metric=\"IP\", gpus=\"\")\n\nprintln(typeof(D), size(D))\nprintln(D[1:5, :])\n","category":"page"},{"location":"example/#example-3","page":"example","title":"example 3","text":"","category":"section"},{"location":"example/","page":"example","title":"example","text":"\nENV[\"JULIA_PYTHONCALL_EXE\"] = \"/home/zhangyong/miniconda3/bin/python\"\nusing Faiss\nusing PythonCall\nusing ProgressMeter\n# np = pyimport(\"numpy\")\n\n\nfunction test()\n    dir_1 = \"/mnt/zy_data/data/longhu_1/sorted_2/\"\n    feats = np.load(joinpath(dir_1, \"feats.npy\"))\n    println(typeof(feats), feats.shape)\n    feats = pyconvert(Array{Float32, 2}, feats)\n    # D, I = local_rank(vs_query, vs_gallery, k=10, gpus=\"\")\n\n    feat_dim = size(feats, 2)\n    idx = Index(feat_dim; str=\"IDMap2,Flat\", metric=\"L2\", gpus=\"4\")  # IDMap2. L2,IP\n    Faiss.show(idx)\n    k = 10\n    @showprogress for i in range(1, 1000)\n        vs_gallery = feats[100*i+1:100*(i+1),:]\n        # println(typeof(feats), size(feats))\n        vs_query = vs_gallery\n        \n        # D, I = add_search(idx, vs_query, vs_gallery; k=10, flag=true, metric=\"cos\")\n        # D, I = add_search_with_ids(idx, vs_query, vs_gallery; k=10)\n        ids = collect(range(100*i+1, 100*(i+1))) .+ 100\n        println(typeof(ids), size(ids))\n        add_with_ids(idx, vs_gallery, ids)\n        D, I = search(idx, vs_query, k) \n        # println(typeof(D), size(D))\n        # println(typeof(I), size(I))\n    end\nend\n\n@time test()\n","category":"page"}]
}
